{"version":3,"sources":["components/PasswordGenerator/PasswordGenerator.js","App.js","serviceWorker.js","index.js"],"names":["PasswordGenerator","state","hash","option","input","copied","undefined","generateHash","shaObj","jsSHA","setHMACKey","update","hmac","getHMAC","substring","replace","setState","copyToClipboard","copy","setTimeout","onKeyPress","e","key","onOptionChange","target","value","onInputChange","id","type","onChange","this","onClick","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0TAKqBA,E,2MACjBC,MAAQ,CACJC,KAAM,qBACNC,OAAQ,GACRC,MAAO,GACPC,YAAQC,G,EAGZC,aAAe,WACX,IAAIC,EAAS,IAAIC,EAAM,QAAS,QAChCD,EAAOE,WAAW,EAAKT,MAAME,OAAQ,QACrCK,EAAOG,OAAO,EAAKV,MAAMG,OACzB,IAAIQ,EAAOJ,EAAOK,QAAQ,OAE1BD,GADAA,EAAOA,EAAKE,UAAU,KAEjBC,QAAQ,IAAK,KACbA,QAAQ,IAAK,KACbA,QAAQ,IAAK,KAClB,EAAKC,SAAS,CACVd,KAAMU,K,EAIdK,gBAAkB,WACdC,IAAK,EAAKjB,MAAMC,MAChB,EAAKc,SAAS,CACVX,OAAQ,YAEZc,YAAW,WACP,EAAKH,SAAS,CACVX,YAAQC,MAEb,M,EAGPc,WAAa,SAAAC,GACK,UAAVA,EAAEC,KACF,EAAKL,mB,EAIbM,eAAiB,SAAAF,GACb,EAAKL,SACD,CACIb,OAAQkB,EAAEG,OAAOC,OAErB,EAAKlB,e,EAIbmB,cAAgB,SAAAL,GACZ,EAAKL,SACD,CACIZ,MAAOiB,EAAEG,OAAOC,OAEpB,EAAKlB,e,wEAKT,OACI,yBAAKoB,GAAG,QACJ,yBAAKA,GAAG,QACJ,sCACA,2BACIC,KAAK,OACLC,SAAUC,KAAKP,eACfH,WAAYU,KAAKV,aAErB,qCACA,2BACIQ,KAAK,WACLC,SAAUC,KAAKJ,cACfN,WAAYU,KAAKV,aAErB,4BAAQW,QAASD,KAAKb,iBACjBa,KAAK7B,MAAMI,QAAUyB,KAAK7B,MAAMC,Y,GA5EV8B,aCEhCC,MAJf,WACI,OAAO,kBAAC,EAAD,OCQLC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhD,QACf0C,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,QAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,QAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.760ae3a2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./PasswordGenerator.css\";\nimport * as jsSHA from \"jssha\";\nimport copy from \"copy-to-clipboard\";\n\nexport default class PasswordGenerator extends Component {\n    state = {\n        hash: \"Generated password\",\n        option: \"\",\n        input: \"\",\n        copied: undefined\n    };\n\n    generateHash = () => {\n        let shaObj = new jsSHA(\"SHA-1\", \"TEXT\");\n        shaObj.setHMACKey(this.state.option, \"TEXT\");\n        shaObj.update(this.state.input);\n        let hmac = shaObj.getHMAC(\"B64\");\n        hmac = hmac.substring(12);\n        hmac = hmac\n            .replace(\"/\", \".\")\n            .replace(\"=\", \"!\")\n            .replace(\"+\", \"?\");\n        this.setState({\n            hash: hmac\n        });\n    };\n\n    copyToClipboard = () => {\n        copy(this.state.hash);\n        this.setState({\n            copied: \"Copied!\"\n        });\n        setTimeout(() => {\n            this.setState({\n                copied: undefined\n            });\n        }, 2000);\n    };\n\n    onKeyPress = e => {\n        if (e.key === \"Enter\") {\n            this.copyToClipboard();\n        }\n    };\n\n    onOptionChange = e => {\n        this.setState(\n            {\n                option: e.target.value\n            },\n            this.generateHash\n        );\n    };\n\n    onInputChange = e => {\n        this.setState(\n            {\n                input: e.target.value\n            },\n            this.generateHash\n        );\n    };\n\n    render() {\n        return (\n            <div id=\"cont\">\n                <div id=\"main\">\n                    <h1>Option</h1>\n                    <input\n                        type=\"text\"\n                        onChange={this.onOptionChange}\n                        onKeyPress={this.onKeyPress}\n                    ></input>\n                    <h1>Input</h1>\n                    <input\n                        type=\"password\"\n                        onChange={this.onInputChange}\n                        onKeyPress={this.onKeyPress}\n                    ></input>\n                    <button onClick={this.copyToClipboard}>\n                        {this.state.copied || this.state.hash}\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport PasswordGenerator from \"./components/PasswordGenerator\";\n\nfunction App() {\n    return <PasswordGenerator />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}