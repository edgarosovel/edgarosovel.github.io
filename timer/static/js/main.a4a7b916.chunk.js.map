{"version":3,"sources":["alarm.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","minutes","timerStopped","timerStarted","addMinute","setTime","Number","setState","removeMinute","startTimer","start","enable","stopTimer","stop","disable","reset","handleAlarmFinishedPlaying","isOn","formatValue","value","initialTime","direction","startImmediately","checkpoints","time","callback","resume","pause","timerState","className","url","alarm","playStatus","Sound","status","PLAYING","STOPPED","volume","playFromPosition","ignoreMobileRestrictions","onFinishedPlaying","Minutes","Seconds","onClick","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,mC,+PC6K5BC,G,uNAnKXC,MAAQ,CACJC,QAAS,EACTC,cAAc,EACdC,cAAc,G,EAGlBC,UAAY,SAAAC,GACRA,EAAyC,GAAjCC,OAAO,EAAKN,MAAMC,QAAU,GAAU,KAC9C,EAAKM,SAAS,CACVN,QAAS,EAAKD,MAAMC,QAAU,EAC9BC,cAAc,K,EAKtBM,aAAe,SAAAH,GACgB,IAAvB,EAAKL,MAAMC,UACfI,EAAyC,GAAjCC,OAAO,EAAKN,MAAMC,QAAU,GAAU,KAC9C,EAAKM,SAAS,CACVN,QAAS,EAAKD,MAAMC,QAAU,EAC9BC,cAAc,M,EAItBO,WAAa,SAACC,EAAOC,GACjBD,IACAC,IACA,EAAKJ,SAAS,CACVL,cAAc,EACdC,cAAc,K,EAItBS,UAAY,SAACC,EAAMC,EAASC,GACxBF,IACAC,IACAC,IACA,EAAKR,SAAS,CACVJ,cAAc,EACdD,cAAc,K,EAItBA,aAAe,WACX,EAAKK,SAAS,CACVN,QAAS,EACTE,cAAc,EACdD,cAAc,K,EAItBc,2BAA6B,WACzB,EAAKT,SAAS,CACVL,cAAc,K,wEAIZ,IAAD,OACL,OACI,kBAAC,IAAD,MACK,cAAGe,KAAH,IAASN,EAAT,EAASA,OAAQG,EAAjB,EAAiBA,QAAjB,OACG,kBAAC,IAAD,CACII,YAAa,SAAAC,GAAK,gBACXA,EAAQ,GAAR,WAAiBA,GAAUA,IAElCC,YAA0C,GAA7Bd,OAAO,EAAKN,MAAMC,SAAgB,IAC/CoB,UAAU,WACVC,kBAAkB,EAClBC,YAAa,CACT,CACIC,KAAM,EACNC,SAAU,EAAKvB,iBAItB,gBACGQ,EADH,EACGA,MAGAG,GAJH,EAEGa,OAFH,EAGGC,MAHH,EAIGd,MACAE,EALH,EAKGA,MAEAV,GAPH,EAMGuB,WANH,EAOGvB,SAPH,OASG,yBAAKwB,UAAU,mDACX,kBAAC,IAAD,CACIC,IAAKC,IACLC,WACI,EAAKhC,MAAMG,cACX,EAAKH,MAAME,aACL+B,IAAMC,OAAOC,QACbF,IAAMC,OAAOE,QAEvBC,OAAQ,EAAKrC,MAAMG,aAAe,EAAI,IACtCmC,iBAAkB,EAClBC,0BAA0B,EAC1BC,kBACI,EAAKxB,6BAIb,yBAAKa,UAAU,SACX,yBAAKA,UAAU,oBACX,kBAAC,IAAMY,QAAP,MADJ,IACsB,kBAAC,IAAMC,QAAP,OAGtB,yBAAKb,UAAU,iCACX,4BACIc,QAAS,WACL,EAAKnC,aAAaH,IAEtBwB,UAAU,wCACVe,SAAU,EAAK5C,MAAMG,cALzB,KASA,4BACIwC,QAAS,WACL,EAAKvC,UAAUC,IAEnBwB,UAAU,wCACVe,SAAU,EAAK5C,MAAMG,cALzB,OAYR,yBAAK0B,UAAU,+EACV,EAAK7B,MAAMG,aACR,4BACIwC,QAAS,WACL,EAAK/B,UACDC,EACAC,EACAC,IAGRc,UAAU,+CARd,QAaA,4BACIc,QAAS,WACL,EAAKlC,WAAWC,EAAOC,IAE3BkB,UAAU,+CACVe,SAAiC,IAAvB,EAAK5C,MAAMC,SALzB,qB,GAhJtB4C,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a4a7b916.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alarm.d5acce1f.mp3\";","import React, { Component } from \"react\";\nimport ReactNoSleep from \"react-no-sleep\";\nimport Timer from \"react-compound-timer\";\nimport Sound from \"react-sound\";\nimport alarm from \"./alarm.mp3\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n    state = {\n        minutes: 0,\n        timerStopped: false,\n        timerStarted: false\n    };\n\n    addMinute = setTime => {\n        setTime(Number(this.state.minutes + 1) * 60 * 1000);\n        this.setState({\n            minutes: this.state.minutes + 1,\n            timerStopped: false\n        });\n        // setTime(10000);\n    };\n\n    removeMinute = setTime => {\n        if (this.state.minutes === 0) return;\n        setTime(Number(this.state.minutes - 1) * 60 * 1000);\n        this.setState({\n            minutes: this.state.minutes - 1,\n            timerStopped: false\n        });\n    };\n\n    startTimer = (start, enable) => {\n        start(); // start timer\n        enable(); // enable noSleep.js\n        this.setState({\n            timerStopped: false,\n            timerStarted: true\n        });\n    };\n\n    stopTimer = (stop, disable, reset) => {\n        stop();\n        disable();\n        reset();\n        this.setState({\n            timerStarted: false,\n            timerStopped: false\n        });\n    };\n\n    timerStopped = () => {\n        this.setState({\n            minutes: 0,\n            timerStarted: false,\n            timerStopped: true\n        });\n    };\n\n    handleAlarmFinishedPlaying = () => {\n        this.setState({\n            timerStopped: false\n        });\n    };\n\n    render() {\n        return (\n            <ReactNoSleep>\n                {({ isOn, enable, disable }) => (\n                    <Timer\n                        formatValue={value =>\n                            `${value < 10 ? `0${value}` : value}`\n                        }\n                        initialTime={Number(this.state.minutes) * 60 * 1000}\n                        direction=\"backward\"\n                        startImmediately={false}\n                        checkpoints={[\n                            {\n                                time: 0,\n                                callback: this.timerStopped\n                            }\n                        ]}\n                    >\n                        {({\n                            start,\n                            resume,\n                            pause,\n                            stop,\n                            reset,\n                            timerState,\n                            setTime\n                        }) => (\n                            <div className=\"h-100 d-flex flex-column justify-content-center\">\n                                <Sound\n                                    url={alarm}\n                                    playStatus={\n                                        this.state.timerStarted ||\n                                        this.state.timerStopped\n                                            ? Sound.status.PLAYING\n                                            : Sound.status.STOPPED\n                                    }\n                                    volume={this.state.timerStarted ? 0 : 100}\n                                    playFromPosition={0 /* in milliseconds */}\n                                    ignoreMobileRestrictions={true}\n                                    onFinishedPlaying={\n                                        this.handleAlarmFinishedPlaying\n                                    }\n                                />\n\n                                <div className=\"w-100\">\n                                    <div className=\"time text-center\">\n                                        <Timer.Minutes />:<Timer.Seconds />\n                                    </div>\n\n                                    <div className=\"d-flex justify-content-around\">\n                                        <button\n                                            onClick={() => {\n                                                this.removeMinute(setTime);\n                                            }}\n                                            className=\"btn btn-timer btn-dark rounded-circle\"\n                                            disabled={this.state.timerStarted}\n                                        >\n                                            -\n                                        </button>\n                                        <button\n                                            onClick={() => {\n                                                this.addMinute(setTime);\n                                            }}\n                                            className=\"btn btn-timer btn-dark rounded-circle\"\n                                            disabled={this.state.timerStarted}\n                                        >\n                                            +\n                                        </button>\n                                    </div>\n                                </div>\n\n                                <div className=\"control-buttons w-100 position-fixed d-flex flex-column align-items stretch\">\n                                    {this.state.timerStarted ? (\n                                        <button\n                                            onClick={() => {\n                                                this.stopTimer(\n                                                    stop,\n                                                    disable,\n                                                    reset\n                                                );\n                                            }}\n                                            className=\"btn btn-lg btn-danger rounded-0 btn-control\"\n                                        >\n                                            STOP\n                                        </button>\n                                    ) : (\n                                        <button\n                                            onClick={() => {\n                                                this.startTimer(start, enable);\n                                            }}\n                                            className=\"btn btn-lg btn-success rounded-0 btn-control\"\n                                            disabled={this.state.minutes === 0}\n                                        >\n                                            START\n                                        </button>\n                                    )}\n                                </div>\n                            </div>\n                        )}\n                    </Timer>\n                )}\n            </ReactNoSleep>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}